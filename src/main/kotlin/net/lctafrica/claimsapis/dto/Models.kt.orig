package net.lctafrica.claimsapis.dto

import com.fasterxml.jackson.annotation.JsonFormat
import com.fasterxml.jackson.annotation.JsonIgnore
import org.hibernate.Hibernate
import org.hibernate.annotations.CreationTimestamp
import org.hibernate.annotations.UpdateTimestamp
import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime
import javax.persistence.*


enum class Status {
    ACTIVE, CLOSED, PENDING, ABANDONED, TRANSMITTED, SETTLED, REJECTED
}

enum class ClaimProcessStatus {
    PROCESSED, UNPROCESSED
}

@Entity
@Table(name = "visit",uniqueConstraints = [
	UniqueConstraint(name = "provider_invoiceNumber_UNQ",
		columnNames = ["hospitalProviderId", "invoiceNumber"]),
	UniqueConstraint(name = "invoiceNumber_UNQ",
		columnNames = ["invoiceNumber"])
])
data class Visit(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "visit_number")
    val id: Long = 0,

    val memberNumber: String? = null,

    val hospitalProviderId: Long,

    val staffId: String? = null,

    val staffName: String? = null,

    val aggregateID: String? = null,

    val categoryId: String? = null,

    val benefitName: String? = null,

    val payerId: String,
    val payerName: String,
    val policyNumber: String,

    var balanceAmount: BigDecimal,

    val beneficiaryType: String? = null,

    var totalInvoiceAmount: BigDecimal?,

    val benefitProcessStatus: String? = null,

    val haisProcessStatus: String? = null,

    var invoiceNumber: String?,

    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    var status: Status?,

    @Enumerated(EnumType.STRING)
    @Column(name = "claim_process_status")
    var claimProcessStatus: ClaimProcessStatus?,

    @CreationTimestamp
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
    @Column(name = "created_at", updatable = false, nullable = false)
    val createdAt: LocalDateTime? = null,

    @UpdateTimestamp
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
    @Column(name = "updated_at", insertable = false)
    val updatedAt: LocalDateTime? = null,

    @OneToMany(mappedBy = "visit_number", fetch = FetchType.EAGER)
    var diagnosis: List<Diagnosis>?,

//	@OneToMany(mappedBy = "id", fetch = FetchType.EAGER)
//	var invoiceLines: List<InvoiceLine>?,

) {
    override fun toString(): String {
        return "Visit (id=$id, name=$memberNumber, hospitalProviderId=$hospitalProviderId)"
    }
}

@Entity
@Table(name = "invoice")
data class Invoice(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "invoice_id", nullable = false)
    var id: Long = 0,
    var hospitalProviderId: Long?,

    var invoiceNumber: String?,

    @OneToMany(mappedBy = "invoice_id")
    var invoiceLines: Set<InvoiceLine>?,

    @ManyToOne
    @JoinColumn(name = "visit_number", nullable = false)
    var visit_number: Visit,
)

@Entity
@Table(name = "invoice_line")
data class InvoiceLine(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    var id: Long = 0,

    var lineTotal: BigDecimal,
    @Column(name = "description")
    var description: String,

    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "invoice_id", nullable = false)
    var invoice_id: Invoice?,
) {
    override fun toString(): String {
        return "Bill (id=$id,  description=$lineTotal)"
    }
}

@Entity
@Table(name = "diagnosis")
data class Diagnosis(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    var id: Long = 0,
    val icd10code: String?,
    var name: String?,

    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "visit_number", nullable = false)
    var visit_number: Visit?,

    )

@Entity
@Table(name = "clinical_information")
data class ClinicalInformation(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    var id: Long = 0,

    var icd10code: String?,

    var name: String?,

    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "visit_number", nullable = false)
    var visit_number: Visit?,
)

@Entity
@Table(name = "icd10code")
data class Icd10code(
    @Id
    @Column(name = "id", nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long? = null,

    @Column(name = "code")
    var code: String? = null,
    @Column(name = "title") var title: String? = null
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || Hibernate.getClass(this) != Hibernate.getClass(
                other
            )
        ) return false
        other as Icd10code

        return code != null && code == other.code
    }

    override fun hashCode(): Int = javaClass.hashCode()

    @Override
    override fun toString(): String {
        return this::class.simpleName + "(code = $code , title = $title )"
    }


}

@Entity
@Table(
    name = "benefit_beneficiary",
    uniqueConstraints = [
        UniqueConstraint(name = "Benefit_Beneficiary_UNQ", columnNames = ["benefit_id", "beneficiary_id"])
    ]
)
data class BeneficiaryBenefit(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long = 0,
    @Column(name = "aggregate_id")
    val aggregateID: String,
    @Column(name = "benefit_id")
    val benefitId: Long,
    @Column(name = "beneficiary_id")
    val beneficiaryId: Long,
    @Column(name = "member_number")
    val memberNumber: String?,
    @Column(name = "benefit_name")
    val benefitName: String,
    @Column(name = "status")
    @Enumerated(EnumType.STRING)
    val status: BenefitStatus,
    @Column(name = "balance")
    val balance: BigDecimal,
    @Column(name = "suspension_threshold")
    val suspensionThreshold: BigDecimal,
    @Column(name = "limit")
    val limit: BigDecimal,
    @Column(name = "category_id")
    val categoryId: Long,
    @Column(name = "payer_id")
    val payerId: Long,
    /*@Column(name = "sharing")
    @Enumerated(EnumType.STRING)
    val sharing: Sharing,*/
    @Column(name = "utilization")
    val utilization: BigDecimal,
    @ManyToOne
    @JoinColumn(name = "parent_id")
    val parent: BeneficiaryBenefit?,
    @OneToMany(mappedBy = "parent")
    val subBenefits: Set<BeneficiaryBenefit> = mutableSetOf(),
    @Column(name="start_date")
    val startDate: LocalDate,
    @Column(name="end_date")
    val endDate: LocalDate,
) {
    enum class BenefitStatus {
        ACTIVE, SUSPENDED, CANCELED
    }

    enum class Sharing {
        FAMILY, INDIVIDUAL
    }
}
